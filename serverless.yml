# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: coinpurchase

#variablesResolutionMode: 20210326

# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

useDotenv: true
plugins:
  - serverless-dotenv-plugin
  - serverless-step-functions
  - serverless-offline
provider:
  name: aws
  runtime: go1.x
  # you can define service wide environment variables here
  environment:
    GATE_API_KEY: ${env:GATE_API_KEY}
    GATE_SECRET_KEY: ${env:GATE_SECRET_KEY}
    PURCHASE_AMOUNT_IN_USDT: ${env:PURCHASE_AMOUNT_IN_USDT}
    CRYPTO_DATA_BUCKET: ${self:custom.buckets.cryptoData.name}
# you can overwrite defaults here
  stage: prod
  region: eu-west-1

  # you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource: ${self:custom.buckets.cryptoData.arn}
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource:
            -  arn:aws:events:*
  #        - Effect: "Allow"
  #          Action:
  #            - "s3:PutObject"
  #          Resource:
  #            Fn::Join:
  #              - ""
  #              - - "arn:aws:s3:::"
  #                - "Ref" : "ServerlessDeploymentBucket"
  #                - "/*"

custom:
  buckets:
    cryptoData:
      name: ${self:service}-${self:provider.stage}-crypto-data-backet
      arn: arn:aws:s3:::${self:custom.buckets.cryptoData.name}/*

package:
  patterns:
    - '!./**'
    - ./bin/**

functions:
  coinPurchase:
    handler: bin/coinPurchase
    events:
      - eventBridge:
          pattern:
            source:
              - bot.coinPurchase
  syncCoins:
    handler: bin/syncCoins
    events:
      - schedule: rate(1 hour)
  checkCoins:
    handler: bin/checkCoins
    events:
      - eventBridge:
          pattern:
            source:
              - notify.importantNews

stepFunctions:
  stateMachines:
    purchaseState:
      type: STANDARD
      name: purchaseCoinsState-${self:provider.stage}
      events:
        - eventBridge:
            event:
              source:
                - bot.trade
      definition:
        StartAt: PurchaseCoins
        States:
          PurchaseCoins:
            Type: Map
            InputPath: $
            ItemsPath: $.detail.coins
            MaxConcurrency: 0
            Iterator:
              StartAt: InvokePurchaseCoinsLambda
              States:
                InvokePurchaseCoinsLambda:
                  Type: Task
                  Resource:
                    Fn::GetAtt: [ coinPurchase, Arn ]
                  End: true
            ResultPath: $
            End: true


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/coinPurchase'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /coinPurchase

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    CryptoDataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.cryptoData.name}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
